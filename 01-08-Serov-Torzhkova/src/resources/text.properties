db.url = jdbc:oracle:thin:@localhost:1521/DB_COURSES
db.user = SYSTEM
db.password = co1234
## Messages ##
message.loginerror = \u041D\u0435\u0432\u0435\u0440\u043D\u044B\u0439 \u043B\u043E\u0433\u0438\u043D \u0438\u043B\u0438 \u043F\u0430\u0440\u043E\u043B\u044C
message.nullpage = \u0421\u0442\u0440\u0430\u043D\u0438\u0446\u0430 \u043D\u0435 \u043D\u0430\u0439\u0434\u0435\u043D\u0430
message.wrongaction = : \u043A\u043E\u043C\u0430\u043D\u0434\u0430 \u043D\u0435 \u043D\u0430\u0439\u0434\u0435\u043D\u0430 \u0438\u043B\u0438 \u043D\u0435\u0432\u0435\u0440\u043D\u0430!
message.errorAlreadyAuthorized  = \u0412\u044B \u0443\u0436\u0435 \u0430\u0432\u0442\u043E\u0440\u0438\u0437\u043E\u0432\u0430\u043D\u044B
message.admin.existedLogin = \u0422\u0430\u043A\u043E\u0439 \u043B\u043E\u0433\u0438\u043D \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442
message.teacher.existedCourse = \u0422\u0430\u043A\u043E\u0439 \u043A\u0443\u0440\u0441 \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442!
message.teacher.existedLessonDate = (\u0417\u0430\u043D\u044F\u0442\u0438\u0435 \u0441 \u0442\u0430\u043A\u043E\u0439 \u0434\u0430\u0442\u043E\u0439 \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442)
message.teacher.lessonDateNotInDatesRangeCourse = (\u0412\u0432\u0435\u0434\u0451\u043D\u043D\u0430\u044F \u0434\u0430\u0442\u0430 \u043D\u0435 \u043D\u0430\u0445\u043E\u0434\u0438\u0442\u0441\u044F \u0432 \u0441\u0440\u043E\u043A\u0430\u0445 \u043F\u0440\u043E\u0432\u0435\u0434\u0435\u043D\u0438\u044F \u043A\u0443\u0440\u0441\u0430)
message.teacher.finalGradeDateNotInDatesRangeCourse = (%s \u043D\u0435 \u043D\u0430\u0445\u043E\u0434\u0438\u0442\u0441\u044F \u0432 \u0441\u0440\u043E\u043A\u0430\u0445 \u043F\u0440\u043E\u0432\u0435\u0434\u0435\u043D\u0438\u044F \u043A\u0443\u0440\u0441\u0430)
## Application configuration ##
path.page.index = /index.jsp
path.page.login = /jsp/login.jsp
path.page.error = /jsp/error/error.jsp
## Main users ##
path.page.admin.main = /jsp/administrator/main.jsp
path.page.moderator.main = /jsp/moderator/main.jsp
path.page.teacher.main = /jsp/teacher/main.jsp
path.page.student.myCourses = /jsp/student/myCourses.jsp
## Admin ##
path.page.admin.addUser = /jsp/administrator/addUser.jsp
path.page.admin.editUser = /jsp/administrator/editUser.jsp
## Teacher ##
path.page.teacher.addCourse = /jsp/teacher/addCourse.jsp
path.page.teacher.courseDescription = /jsp/teacher/courseDescription.jsp
path.page.teacher.announcements = /jsp/teacher/announcements.jsp
path.page.teacher.journal = /jsp/teacher/journal.jsp
path.page.teacher.finalGrades = /jsp/teacher/finalGrades.jsp
path.page.teacher.announcements = /jsp/teacher/announcements.jsp
path.page.teacher.announcementViewers = /jsp/teacher/announcementViewers.jsp
## Student ##
path.page.student.otherCourses = /jsp/student/otherCourses.jsp
path.page.student.courseDescription = /jsp/student/courseDescription.jsp
path.page.student.announcements = /jsp/student/announcements.jsp
path.page.student.journal = /jsp/student/journal.jsp
## SQL queries ##
## User ##
sql.user.select.all.forAdministrator = SELECT user_id, users.group_id, groups.name, login, password, full_name, authorization_status, lock_status FROM users JOIN groups ON users.group_id = groups.group_id ORDER BY users.authorization_status, groups.group_id, users.login
sql.user.select.all.forModerator = SELECT user_id, users.group_id, groups.name, login, password, full_name, authorization_status, lock_status FROM users JOIN groups ON users.group_id = groups.group_id ORDER BY users.lock_status, groups.group_id, users.login
sql.user.select.byLogin = SELECT user_id, users.group_id, groups.name, login, password, full_name, authorization_status, lock_status FROM users JOIN groups ON users.group_id = groups.group_id  WHERE login = ?
sql.user.select.byLoginAndPassword = SELECT user_id, users.group_id, groups.name, login, password, full_name, authorization_status, lock_status FROM users JOIN groups ON users.group_id = groups.group_id  WHERE login = ? AND password = ?
sql.user.select.byId.WithLockStatus = SELECT user_id, lock_status FROM users JOIN groups ON users.group_id = groups.group_id  WHERE user_id = ?
sql.user.insert = INSERT INTO users VALUES (NVL((SELECT MAX(user_id) FROM users),0)+1, ?, ?, ?, ?, '\u043D\u0435 \u0430\u0432\u0442\u043E\u0440\u0438\u0437\u043E\u0432\u0430\u043D', '\u043D\u0435 \u0437\u0430\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u0430\u043D')
sql.user.update = UPDATE users SET login = ?, password = ?, full_name = ? WHERE user_id = ?
sql.user.update.lockStatus = UPDATE users SET lock_status = ? WHERE user_id = ?
sql.user.update.authorizationStatus = UPDATE users SET authorization_status = ? WHERE user_id = ?
sql.user.delete = DELETE FROM users WHERE user_id = ?
## Course ##
sql.course.select.all.byTeacher = SELECT course_id, name, description, teacher_id, full_name, start_date, end_date, max_students_amount FROM courses JOIN users ON courses.teacher_id = users.user_id WHERE teacher_id = ?
sql.course.select.byStudent.withParticipation = SELECT courses.course_id, name, description, teacher_id, full_name, start_date, end_date, max_students_amount FROM courses JOIN users ON courses.teacher_id = users.user_id JOIN participation ON courses.course_id = participation.course_id WHERE student_id = ? ORDER BY start_date DESC
sql.course.select.byStudent.withoutParticipation = SELECT courses.course_id, name, description, teacher_id, full_name, start_date, end_date, max_students_amount FROM courses JOIN users ON courses.teacher_id = users.user_id WHERE course_id NOT IN (SELECT course_id FROM participation WHERE student_id = ?) ORDER BY start_date DESC
sql.course.select.withDescription = SELECT course_id, name, description, teacher_id, full_name, start_date, end_date, max_students_amount FROM courses JOIN users ON courses.teacher_id = users.user_id WHERE course_id = ?
sql.course.select.withAnnouncements = SELECT announcement_id, description, creation_date FROM announcements WHERE course_id = ? ORDER BY announcement_id DESC
sql.course.select.withAttendanceAndGrades = SELECT lesson_id, lesson_date FROM lessons WHERE course_id = ?
sql.course.select.students = SELECT user_id, full_name FROM users JOIN participation ON users.user_id = participation.student_id WHERE course_id = ? ORDER BY full_name
sql.course.select.absentStudents.byLesson = SELECT student_id FROM skipping_lessons WHERE lesson_id = ?
sql.course.select.midtermGrades.byLesson = SELECT student_id, grade FROM midterm_grades WHERE lesson_id = ?
sql.course.select.lesson.byDate = SELECT lesson_id FROM lessons WHERE lesson_date = ? AND course_id = ?
sql.course.select.viewers.byAnnouncement = SELECT full_name FROM announcement_views JOIN users ON announcement_views.student_id = users.user_id WHERE announcement_id = ? ORDER BY users.full_name ASC
sql.course.select.announcement = SELECT description, creation_date FROM announcements WHERE announcement_id = ?
sql.course.select.announcements.notViewed = SELECT announcement_id, description, creation_date FROM announcements WHERE course_id = ? AND announcement_id NOT IN (SELECT announcement_id FROM announcement_views WHERE student_id = ?) ORDER BY creation_date DESC
sql.course.select.announcements.viewed = SELECT announcement_id, description, creation_date FROM announcements WHERE course_id = ? AND announcement_id IN (SELECT announcement_id FROM announcement_views WHERE student_id = ?) ORDER BY creation_date DESC
sql.course.select.finalGrades = SELECT student_id, grade_date, grade FROM final_grades WHERE course_id = ?
sql.course.select.byNameAndDates = SELECT course_id FROM courses WHERE name = ? AND start_date = ? AND end_date = ?
sql.course.insert = INSERT INTO courses VALUES (NVL((SELECT MAX(course_id) FROM courses),0)+1, ?, ?, ?, ?, ?, ?)
sql.course.insert.student = INSERT INTO participation VALUES (?, ?)
sql.course.insert.absentStudents = INSERT INTO skipping_lessons VALUES (?, ?)
sql.course.insert.midtermGrades = INSERT INTO midterm_grades VALUES (?, ?, ?)
sql.course.insert.lesson = INSERT INTO lessons VALUES (NVL((SELECT MAX(lesson_id) FROM lessons),0)+1, ?, ?)
sql.course.insert.announcement = INSERT INTO announcements VALUES (NVL((SELECT MAX(announcement_id) FROM announcements),0)+1, ?, ?, ?)
sql.course.insert.finalGrade = INSERT INTO final_grades VALUES (?, ?, ?, ?)
sql.course.insert.finalGrade.expelled = INSERT INTO final_grades VALUES (?, ?, ?, '\u043E\u0442\u0447\u0438\u0441\u043B\u0435\u043D')
sql.course.insert.viewer = INSERT INTO announcement_views VALUES (?, ?)
sql.course.delete = DELETE FROM courses WHERE course_id = ?
sql.course.delete.fromLesson.absentStudents = DELETE FROM skipping_lessons WHERE lesson_id = ?
sql.course.delete.fromLesson.midtermGrades = DELETE FROM midterm_grades WHERE lesson_id = ?
sql.course.delete.lesson = DELETE FROM lessons WHERE lesson_id = ?
sql.course.delete.fromAnnouncement.viewers = DELETE FROM announcement_views WHERE announcement_id = ?
sql.course.delete.announcement = DELETE FROM announcements WHERE announcement_id = ?
sql.course.delete.finalGrade = DELETE FROM final_grades WHERE course_id = ? AND student_id = ?
sql.course.delete.finalGrades = DELETE FROM final_grades WHERE course_id = ?
sql.course.delete.finalGrades.byStudent = DELETE FROM final_grades WHERE student_id = ?
sql.course.delete.skippingLessons.byStudent = DELETE FROM skipping_lessons WHERE student_id = ?
sql.course.delete.midtermGrades.byStudent = DELETE FROM midterm_grades WHERE student_id = ?
sql.course.delete.announcementViews.byStudent = DELETE FROM announcement_views WHERE student_id = ?
sql.course.delete.participation.byStudent = DELETE FROM participation WHERE student_id = ?
sql.course.delete.fromAnnouncements.viewers = DELETE FROM announcement_views WHERE EXISTS (SELECT * FROM announcements WHERE announcements.announcement_id = announcement_views.announcement_id AND announcements.course_id = ?)
sql.course.delete.announcements = DELETE FROM announcements WHERE course_id = ?
sql.course.delete.midterGrades = DELETE FROM midterm_grades WHERE EXISTS (SELECT * FROM lessons WHERE lessons.lesson_id = midterm_grades.lesson_id AND lessons.course_id = ?)
sql.course.delete.absentStudents = DELETE FROM skipping_lessons WHERE EXISTS (SELECT * FROM lessons WHERE lessons.lesson_id = skipping_lessons.lesson_id AND lessons.course_id = ?)
sql.course.delete.lessons = DELETE FROM lessons WHERE course_id = ?
sql.course.delete.students = DELETE FROM participation WHERE course_id = ?